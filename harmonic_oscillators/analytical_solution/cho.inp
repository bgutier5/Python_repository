 
import numpy as np

#Defining the parameters of the hamiltonian

arbitrary_mass=1
mass = [1,2,4,5,6]
k_HO_constant = [1,3,4,6,5] 
kcoupling= 5

# setting up K-matrix (creating zero matrix) 

a = numpy.zeros((len(mass), len(mass)))

#loop to fill up K-matrix elements in the zero matrix

for i in range(len(mass)):
 for j in range(len(mass)):
  if i == j + 1 or i == j - 1 :
   a[i,j]= arbitrary_mass * kcoupling / np.sqrt(HO_mass[0]) * np.sqrt(HO_mass[1])
  if i == j :
   a[i,j] = arbitrary_mass*k_HO_constant / HO_mass
print (a)


#obtaining element of K-matrix

	K_diag = arbitrary_mass*kconstant/HO_mass

	K_cross = arbitrary_mass*kcoup/np.sqrt(HO_mass[0])*np.sqrt(HO_mass[1])



	#arranging the elements of kmat

	K_MAT = np.matrix([[K_diag[1], K_cross[0]], [K_cross[0], K_diag[2]]])

	#diagonalizing K-mat

from numpy import linalg as LA
K_FIN=LA.eig(K_MAT)[0]

#using eigenvalues to obtain energy

e1 = 1/2*hbar*sqrt(K_FIN[0]/arbitrary_mass)
e2 = 1/2*hbar*sqrt(K_FIN[1]/arbitrary_mass)
Energy = e1+e2

